import React, { useState, useEffect, useContext} from "react";
import { WeatherContext } from "../../App";
import { useNavigate } from 'react-router-dom';
import "./index.css";
import sunny from "./icon/icon_sunny.svg";
import drizzle from "./icon/icon_drizzle.svg";
import rain from "./icon/icon_rain.svg";
import snow from "./icon/icon_snow.svg";
import storm from "./icon/icon_storm.svg";
import clouds from "./icon/icon_clouds.svg";
import fog from "./icon/icon_fog.svg";
import searchIcon from "./icon/search.svg";
import home from "./icon/icon_home.svg";


const IconWeather: React.FC<{ weatherData:any}> = ({weatherData}) => {
        const getIcon = (weatherMain: string) => {
            switch (weatherMain) {
                case "Clear":
                    return sunny;
                case "Clouds":
                    return clouds;
                case "Snow":
                    return snow;
                case "Rain":
                    return rain;
                case "Drizzle":
                    return drizzle;
                case "Thunderstorm":
                    return storm;
                case "Atmosphere":
                    return fog;
                default:
                    return sunny
            }
        }
        return (
        <div className="icon__weather">
            { weatherData && weatherData.weather && weatherData.weather[0] &&
            (<img src={getIcon(weatherData.weather[0].main)} alt={weatherData.weather[0].description} width={210} height={190} />)}
        </div>
        )
    }


const Main: React.FC = () => {
    const { setCity, setWeatherData, weatherData, city } = useContext(WeatherContext);
    const [error, setError] = useState<string | null>(null);
    const [currentDateTime, setCurrentDateTime] = useState(new Date());
    const [search, setSearch] = useState(false);
    const [searchQuery, setSearchQuery] = useState("");


    const API_KEY = '4ee8a5b2ffae806d12f2b88390b4a76a';

    const toggleMenu = () => {
        setSearch(!search);
    };
    
    useEffect(() => {
        if (weatherData) return;
        if (!navigator.geolocation) {
            setError("Geolocation is not supported!");
            return;
        }

        let isMounted = true;

        const fetchCityAndWeatherData = async (lat: number, lon: number) => {
            try {
                const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`);
                const data = await response.json();
                if (response.ok && isMounted) {
                    setCity(data.name);
                    setWeatherData(data);
                    setError(null);
                } else {
                    throw new Error("Failed to fetch weather data");
                }
            } catch (error: any) {
                if (isMounted) {
                    setError(error.message || "Failed to fetch data");
                }
            }
        };

        const handleSuccess = (position: GeolocationPosition) => {
            const lat = position.coords.latitude;
            const lon = position.coords.longitude;

            
            if (!weatherData) {
                fetchCityAndWeatherData(lat, lon);
            }
        };

        const handleError = (error: GeolocationPositionError) => {
            if (isMounted) {
                setError(`Geolocation error: ${error.message}`);
            }
        };

        navigator.geolocation.getCurrentPosition(handleSuccess, handleError);

        return () => {
            isMounted = false;
        };
    }, [weatherData]);


    useEffect(() => {
        const timer = setInterval(() => {
            setCurrentDateTime(new Date());
        }, 1000);

        return () => clearInterval(timer);
    }, []);

    const navigate = useNavigate();

    const handleViewStats = () => {
        navigate('/city')
    }

    const handleSearchSubmit = async (event: React.FormEvent) => {
        event.preventDefault();

        if (!searchQuery) return;

        try {
            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${searchQuery}&appid=${API_KEY}`);
            const data = await response.json();
            if (response.ok) {
                setCity(data.name);
                setWeatherData(data);
                setError(null);
            } else {
                setError(data.message || "Failed to fetch weather data for the city");
            }
        } catch (error: any) {
            setError(error.message || "Failed to fetch data");
        }

        toggleMenu();
    };
    
    const daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

    const day = daysOfWeek[currentDateTime.getDay()];
    const hours = currentDateTime.getHours().toString().padStart(2, '0');
    const minutes = currentDateTime.getMinutes().toString().padStart(2, '0');

    return (
        <div className="page">
            <div className="page__block">
                <div className="page__content">
                    <header className="header">
                        <div className="logo">
                            <svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="30" cy="30" r="29.6809" stroke="#E7B0C9" stroke-width="0.638298"/>
                            <circle cx="30" cy="30" r="26.4894" stroke="#E7B0C9" stroke-width="0.638298"/>
                            <circle cx="30" cy="30" r="23.2979" stroke="#E7B0C9" stroke-width="0.638298"/>
                            <path d="M20.5893 47.121C20.5893 47.121 20.494 46.7942 20.3033 46.1406C20.1399 45.487 19.8948 44.5883 19.568 43.4444C19.2684 42.3006 18.9144 40.9934 18.5059 39.5227C18.0974 38.0521 17.648 36.4861 17.1578 34.8249C16.6948 33.1636 16.2046 31.4887 15.6872 29.8002C15.197 28.1117 14.7067 26.4912 14.2165 24.9389C13.9714 24.1219 13.5765 23.5227 13.0319 23.1414C12.5144 22.7602 11.7927 22.5559 10.8667 22.5287C10.8395 22.5014 10.8259 22.4742 10.8259 22.447C10.7987 22.3925 10.7714 22.3517 10.7442 22.3244L11.0302 20.241C11.0302 20.241 11.3161 20.2546 11.888 20.2819C12.4872 20.3091 13.168 20.3363 13.9306 20.3636C14.6931 20.3636 15.3195 20.3636 15.8097 20.3636C16.8446 20.3636 17.825 20.3363 18.751 20.2819C19.7042 20.2002 20.494 20.1321 21.1204 20.0776C21.7467 19.9959 22.0599 19.9551 22.0599 19.9551L22.2233 20.2819L22.0191 22.2427C21.1204 22.2972 20.4259 22.3925 19.9357 22.5287C19.4727 22.6376 19.1459 22.801 18.9553 23.0189C18.7919 23.2095 18.7102 23.4819 18.7102 23.8359C18.7102 24.081 18.7919 24.5849 18.9553 25.3474C19.1187 26.11 19.3229 27.0359 19.568 28.1253C19.8404 29.2146 20.1399 30.3857 20.4667 31.6385C20.7936 32.8912 21.1067 34.1304 21.4063 35.3559C21.7331 36.5542 22.0191 37.6572 22.2642 38.6649C22.5365 39.6453 22.7408 40.4351 22.877 41.0342C23.0404 41.6061 23.1221 41.8921 23.1221 41.8921H23.5306C23.8302 41.0751 24.1433 40.19 24.4702 39.2368C24.8242 38.2563 25.1782 37.2351 25.5323 36.1729C25.9136 35.1108 26.2812 34.0351 26.6353 32.9457C26.9893 31.8291 27.3433 30.7397 27.6974 29.6776C28.0514 28.6155 28.3919 27.6078 28.7187 26.6546C28.637 26.3006 28.5553 25.9602 28.4736 25.6334C28.3919 25.2793 28.2965 24.9389 28.1876 24.6121C27.9697 23.8495 27.5884 23.3185 27.0438 23.0189C26.5263 22.7193 25.7774 22.5559 24.797 22.5287L24.6336 22.3244L24.9604 20.241C24.9604 20.241 25.1374 20.2546 25.4914 20.2819C25.8727 20.2819 26.3357 20.2955 26.8804 20.3227C27.425 20.3227 27.9833 20.3363 28.5553 20.3636C29.1272 20.3636 29.6038 20.3636 29.985 20.3636C30.8838 20.3636 31.8097 20.3363 32.7629 20.2819C33.7433 20.2002 34.5604 20.1321 35.214 20.0776C35.8948 19.9959 36.2353 19.9551 36.2353 19.9551L36.3987 20.2819L36.1944 22.2427C35.2957 22.2972 34.6012 22.3789 34.111 22.4878C33.648 22.5968 33.3212 22.7602 33.1306 22.978C32.9672 23.1959 32.8855 23.4955 32.8855 23.8768C32.8855 24.0946 32.9536 24.5712 33.0897 25.3066C33.2531 26.0419 33.471 26.9678 33.7433 28.0844C34.0157 29.1738 34.3016 30.3449 34.6012 31.5976C34.928 32.8232 35.2412 34.0487 35.5408 35.2742C35.8676 36.4725 36.1672 37.5755 36.4395 38.5832C36.7119 39.5908 36.9297 40.3942 37.0931 40.9934C37.2565 41.5925 37.3382 41.8921 37.3382 41.8921H37.7059C37.9782 41.1568 38.305 40.2444 38.6863 39.1551C39.0676 38.0385 39.4761 36.8402 39.9119 35.5602C40.3748 34.2529 40.8242 32.9593 41.2599 31.6793C41.6957 30.3721 42.0906 29.1602 42.4446 28.0436C42.7987 26.8997 43.0846 25.9466 43.3025 25.184C43.5204 24.3942 43.6293 23.904 43.6293 23.7134C43.6293 23.2232 43.4387 22.8827 43.0574 22.6921C42.6761 22.5014 42.0361 22.4061 41.1374 22.4061H39.3399L39.1765 22.2019L39.5033 20.1185C39.5033 20.1185 39.8029 20.1457 40.4021 20.2002C41.0012 20.2274 41.7365 20.2683 42.608 20.3227C43.5067 20.35 44.3919 20.3636 45.2633 20.3636C45.917 20.3636 46.5842 20.3636 47.265 20.3636C47.9459 20.3363 48.5178 20.3091 48.9808 20.2819C49.4438 20.2546 49.6753 20.241 49.6753 20.241L49.3893 22.5287C48.6812 22.5559 48.1774 22.7057 47.8778 22.978C47.5782 23.2232 47.2787 23.7406 46.9791 24.5304L39.0131 46.2632L34.7646 47.121C34.7374 46.9304 34.6012 46.3585 34.3561 45.4053C34.111 44.4521 33.7842 43.2266 33.3757 41.7287C32.9944 40.2308 32.545 38.5559 32.0276 36.704C31.5102 34.8521 30.9519 32.9457 30.3527 30.9849H30.0259L24.8787 46.2632L20.5893 47.121ZM51.5783 46.9168C50.7069 46.9168 50.0532 46.6717 49.6175 46.1814C49.1817 45.664 48.9639 45.0376 48.9639 44.3023C48.9639 43.458 49.2226 42.7636 49.74 42.2189C50.2847 41.6742 50.9792 41.4019 51.8234 41.4019C52.6949 41.4019 53.3486 41.6606 53.7843 42.178C54.2473 42.6683 54.4788 43.2946 54.4788 44.0572C54.4788 44.847 54.22 45.5278 53.7026 46.0997C53.1852 46.6444 52.4771 46.9168 51.5783 46.9168Z" fill="#FBFBFB" fill-opacity="0.5"/>
                            <path d="M19.7718 47.121C19.7718 47.121 19.6765 46.7942 19.4858 46.1406C19.3224 45.487 19.0773 44.5883 18.7505 43.4444C18.4509 42.3006 18.0969 40.9934 17.6884 39.5227C17.2799 38.0521 16.8305 36.4861 16.3403 34.8249C15.8773 33.1636 15.3871 31.4887 14.8697 29.8002C14.3795 28.1117 13.8892 26.4912 13.399 24.9389C13.1539 24.1219 12.759 23.5227 12.2143 23.1414C11.6969 22.7602 10.9752 22.5559 10.0492 22.5287C10.022 22.5014 10.0084 22.4742 10.0084 22.447C9.98116 22.3925 9.95392 22.3517 9.92669 22.3244L10.2126 20.241C10.2126 20.241 10.4986 20.2546 11.0705 20.2819C11.6697 20.3091 12.3505 20.3363 13.1131 20.3636C13.8756 20.3636 14.502 20.3636 14.9922 20.3636C16.0271 20.3636 17.0075 20.3363 17.9335 20.2819C18.8867 20.2002 19.6765 20.1321 20.3029 20.0776C20.9292 19.9959 21.2424 19.9551 21.2424 19.9551L21.4058 20.2819L21.2016 22.2427C20.3029 22.2972 19.6084 22.3925 19.1182 22.5287C18.6552 22.6376 18.3284 22.801 18.1378 23.0189C17.9743 23.2095 17.8926 23.4819 17.8926 23.8359C17.8926 24.081 17.9743 24.5849 18.1378 25.3474C18.3012 26.11 18.5054 27.0359 18.7505 28.1253C19.0229 29.2146 19.3224 30.3857 19.6492 31.6385C19.9761 32.8912 20.2892 34.1304 20.5888 35.3559C20.9156 36.5542 21.2016 37.6572 21.4467 38.6649C21.719 39.6453 21.9233 40.4351 22.0595 41.0342C22.2229 41.6061 22.3046 41.8921 22.3046 41.8921H22.7131C23.0126 41.0751 23.3258 40.19 23.6526 39.2368C24.0067 38.2563 24.3607 37.2351 24.7148 36.1729C25.0961 35.1108 25.4637 34.0351 25.8178 32.9457C26.1718 31.8291 26.5258 30.7397 26.8799 29.6776C27.2339 28.6155 27.5743 27.6078 27.9012 26.6546C27.8195 26.3006 27.7378 25.9602 27.6561 25.6334C27.5743 25.2793 27.479 24.9389 27.3701 24.6121C27.1522 23.8495 26.7709 23.3185 26.2263 23.0189C25.7088 22.7193 24.9599 22.5559 23.9795 22.5287L23.8161 22.3244L24.1429 20.241C24.1429 20.241 24.3199 20.2546 24.6739 20.2819C25.0552 20.2819 25.5182 20.2955 26.0629 20.3227C26.6075 20.3227 27.1658 20.3363 27.7378 20.3636C28.3097 20.3636 28.7863 20.3636 29.1675 20.3636C30.0663 20.3636 30.9922 20.3363 31.9454 20.2819C32.9258 20.2002 33.7429 20.1321 34.3965 20.0776C35.0773 19.9959 35.4178 19.9551 35.4178 19.9551L35.5812 20.2819L35.3769 22.2427C34.4782 22.2972 33.7837 22.3789 33.2935 22.4878C32.8305 22.5968 32.5037 22.7602 32.3131 22.978C32.1497 23.1959 32.068 23.4955 32.068 23.8768C32.068 24.0946 32.1361 24.5712 32.2722 25.3066C32.4356 26.0419 32.6535 26.9678 32.9258 28.0844C33.1982 29.1738 33.4841 30.3449 33.7837 31.5976C34.1105 32.8232 34.4237 34.0487 34.7233 35.2742C35.0501 36.4725 35.3497 37.5755 35.622 38.5832C35.8943 39.5908 36.1122 40.3942 36.2756 40.9934C36.439 41.5925 36.5207 41.8921 36.5207 41.8921H36.8884C37.1607 41.1568 37.4875 40.2444 37.8688 39.1551C38.2501 38.0385 38.6586 36.8402 39.0943 35.5602C39.5573 34.2529 40.0067 32.9593 40.4424 31.6793C40.8782 30.3721 41.2731 29.1602 41.6271 28.0436C41.9812 26.8997 42.2671 25.9466 42.485 25.184C42.7029 24.3942 42.8118 23.904 42.8118 23.7134C42.8118 23.2232 42.6212 22.8827 42.2399 22.6921C41.8586 22.5014 41.2186 22.4061 40.3199 22.4061H38.5224L38.359 22.2019L38.6858 20.1185C38.6858 20.1185 38.9854 20.1457 39.5846 20.2002C40.1837 20.2274 40.919 20.2683 41.7905 20.3227C42.6892 20.35 43.5744 20.3636 44.4458 20.3636C45.0995 20.3636 45.7667 20.3636 46.4475 20.3636C47.1284 20.3363 47.7003 20.3091 48.1633 20.2819C48.6263 20.2546 48.8578 20.241 48.8578 20.241L48.5718 22.5287C47.8637 22.5559 47.3599 22.7057 47.0603 22.978C46.7607 23.2232 46.4612 23.7406 46.1616 24.5304L38.1956 46.2632L33.9471 47.121C33.9199 46.9304 33.7837 46.3585 33.5386 45.4053C33.2935 44.4521 32.9667 43.2266 32.5582 41.7287C32.1769 40.2308 31.7275 38.5559 31.2101 36.704C30.6926 34.8521 30.1343 32.9457 29.5352 30.9849H29.2084L24.0612 46.2632L19.7718 47.121ZM50.7608 46.9168C49.8893 46.9168 49.2357 46.6717 48.8 46.1814C48.3642 45.664 48.1464 45.0376 48.1464 44.3023C48.1464 43.458 48.4051 42.7636 48.9225 42.2189C49.4672 41.6742 50.1617 41.4019 51.0059 41.4019C51.8774 41.4019 52.5311 41.6606 52.9668 42.178C53.4298 42.6683 53.6613 43.2946 53.6613 44.0572C53.6613 44.847 53.4025 45.5278 52.8851 46.0997C52.3676 46.6444 51.6596 46.9168 50.7608 46.9168Z" fill="#FBFBFB"/>
                            </svg>
                        </div>
                        <div>
                            <span className="menu">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M1.2 17.6C0.537326 17.6 0 17.0627 0 16.4C0 15.7846 0.463269 15.2774 1.06005 15.208L1.2 15.2H14.4C14.4 13.2118 16.0118 11.6 18 11.6H20.4C22.3882 11.6 24 13.2118 24 15.2V17.6C24 19.5881 22.3882 21.2 20.4 21.2H18C16.0118 21.2 14.4 19.5881 14.4 17.6L1.2 17.6ZM20.4 14H18C17.3846 14 16.8774 14.4633 16.808 15.06L16.8 15.2V17.6C16.8 18.2154 17.2633 18.7226 17.86 18.792L18 18.8H20.4C21.0154 18.8 21.5226 18.3367 21.592 17.74L21.6 17.6V15.2C21.6 14.5846 21.1367 14.0774 20.54 14.008L20.4 14ZM6 2C7.98816 2 9.6 3.61184 9.6 5.6H22.8C23.4627 5.6 24 6.13733 24 6.8C24 7.41539 23.5367 7.92258 22.94 7.99198L22.8 8.00001H9.6C9.6 9.98817 7.98816 11.6 6 11.6H3.6C1.61184 11.6 0 9.98817 0 8.00001V5.60001C0 3.61185 1.61184 2.00001 3.6 2.00001L6 2ZM6 4.4H3.6C2.98461 4.4 2.47742 4.86327 2.40802 5.46005L2.39999 5.6V8C2.39999 8.61539 2.86326 9.12258 3.46003 9.19198L3.59999 9.20001H5.99999C6.61538 9.20001 7.12257 8.73674 7.19196 8.13997L7.2 8.00001V5.60001C7.2 4.98462 6.73673 4.47743 6.13995 4.40804L6 4.4Z" fill="#FBFBFB"/>
                                </svg>
                            </span>
                        </div>
                    </header>
                    <main className="main__block">
                        <div className="card__weather">
                            {weatherData && <IconWeather weatherData={weatherData} />}
                            <span className="title__city">{error ? error : (city ? city : <span className="loading-text">Loading city...</span>)}</span>
                            <div className="description__part">
                                <div className="info__city">
                                    {error ? (
                                        <div className="error">{error}</div>
                                    ) : weatherData ? (
                                            <div className="flex">
                                                <div className="flex_column">
                                                    <span className="temparute">{Math.round(weatherData.main.temp - 273.15)}°C</span>
                                                    <span className="date">{day}, {hours}:{minutes}</span>
                                                </div>
                                                <div className="info__city">
                                                    <span className="stats__1">Outside: {weatherData.weather[0].description}</span>
                                                    <span className="stats__2">Feels like: {Math.round(weatherData.main.feels_like - 273.15)}°C</span>
                                                </div>
                                        </div>
                                    ) : (
                                        <span className="loading-text">Loading data...</span>
                                    )}
                                </div>
                            </div>
                            <button onClick={handleViewStats} className="btn__viewStats">VIEW STATS</button>
                        </div>
                        <div className="block__info__stats">
                            {error ?
                                (<div className="error">{error}</div>) : 
                                weatherData ? (
                                    <React.Fragment>
                                    <div className="stats__block">
                                            <span className="icon__stats">
                                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M12.0285 16.1645C11.7778 15.946 11.5726 15.4951 11.5726 15.1624V3.6047C11.5726 3.27215 11.3006 3.00014 10.9681 3.00014H10.1926C9.86007 3.00014 9.58805 3.27215 9.58805 3.6047L9.58792 15.1621C9.58792 15.4949 9.37457 15.9358 9.11395 16.1423C9.11395 16.1423 7.99994 17.0245 7.99994 17.8586C7.99994 19.1463 9.13312 20.1903 10.5309 20.1903C11.9285 20.1903 13.0615 19.1462 13.0615 17.8586C13.0615 17.0646 12.0285 16.1643 12.0285 16.1643L12.0285 16.1645Z" fill="white"/>
                                                <path d="M11.3216 6.35842C11.3216 6.69097 11.0496 6.96298 10.717 6.96298H10.4522C10.1197 6.96298 9.84764 6.69098 9.84764 6.35842L9.8475 3.86722C9.8475 3.53468 10.1195 3.26266 10.4521 3.26266H10.7169C11.0494 3.26266 11.3214 3.53467 11.3214 3.86722L11.3216 6.35842Z" fill="white"/>
                                                <path d="M14.5921 13.6013C14.5921 14.1723 14.1296 14.6349 13.5583 14.6349C12.9869 14.6349 12.5246 14.1725 12.5246 13.6013L13.5444 11.7406L14.5921 13.6013Z" fill="white"/>
                                                <path d="M15.7046 15.2926C15.7013 15.6241 15.4305 15.8899 15.0987 15.8867C14.7678 15.8838 14.5017 15.6128 14.505 15.2812L15.1071 14.2071L15.7046 15.2926Z" fill="white"/>
                                                <path d="M15.4869 12.641C15.4852 12.8385 15.3235 12.9971 15.1261 12.9951C14.9288 12.9932 14.7698 12.8317 14.772 12.6343L15.1312 11.9938L15.4869 12.641Z" fill="white"/>
                                                <path d="M12.0069 18.3375C11.9872 18.3372 12.0044 18.3371 12.045 18.3371C12.085 18.3371 11.9978 18.5814 11.8508 18.8797L11.8028 18.9767C11.656 19.275 11.3173 19.5193 11.0504 19.5193H10.5646H10.0793C9.81237 19.5193 9.47367 19.275 9.32662 18.9767L9.27867 18.8797C9.13161 18.5814 9.04483 18.3371 9.08554 18.3371C9.12653 18.3371 9.432 18.3371 9.76458 18.3374L11.4384 18.3376C11.7707 18.3376 12.0268 18.3375 12.0069 18.3375H12.0069Z" fill="white"/>
                                                <path d="M10.3447 18.0755C9.95943 18.0533 9.73911 17.929 9.54197 17.5552C9.34482 17.181 9.36853 17.0372 9.56741 16.5997L9.5796 16.6011C10.0438 16.6842 10.1746 16.7483 10.3695 17.1197C10.5673 17.4932 10.5447 17.7457 10.3446 18.0753" fill="white"/>
                                                <path d="M10.7963 17.01C10.6246 17.0002 10.5264 16.9448 10.4387 16.7783C10.351 16.6119 10.3614 16.5477 10.4502 16.3529L10.4553 16.3533C10.6621 16.3904 10.7205 16.4192 10.8069 16.5844C10.8947 16.7506 10.8847 16.8632 10.7956 17.01" fill="white"/>
                                                <path d="M11.0178 18.0755C10.8425 17.8603 10.8015 17.6826 10.9045 17.3962C11.008 17.1098 11.0958 17.0529 11.4248 16.946L11.4295 16.9535C11.6111 17.2403 11.6399 17.341 11.5381 17.6246C11.4352 17.911 11.2898 18.021 11.0178 18.0747" fill="white"/>
                                                </svg>
                                            </span>
                                        <span className="stat">Pressure: {weatherData.main.pressure} mbar</span>
                                    </div>
                                    <div className="stats__block">
                                        <span className="icon__stats">
                                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M7.90778 9.00997C8.92419 8.59868 9.46792 7.46914 9.05502 6.44872C8.64332 5.43232 5.87944 3.99983 5.87944 3.99983C5.87944 3.99983 4.88741 6.95297 5.29884 7.96909C5.71188 8.98964 6.88843 9.42264 7.90778 9.00984V9.00997Z" fill="white"/>
                                            <path d="M12.1647 15.0288C12.1647 15.0288 11.1444 17.9035 11.5557 18.9196C11.9685 19.9389 13.1422 20.3742 14.1617 19.9614C15.181 19.5488 15.7213 18.4196 15.3087 17.4003C14.8972 16.3839 12.1647 15.0287 12.1647 15.0287V15.0288Z" fill="white"/>
                                            <path d="M5.78 13.8796C5.78 13.8796 4.66064 16.976 5.10379 18.0706C5.54802 19.168 6.83747 19.6474 7.93502 19.2028C9.02962 18.7597 9.54271 17.5511 9.09833 16.4535C8.65488 15.359 5.78 13.8796 5.78 13.8796V13.8796Z" fill="white"/>
                                            <path d="M12.1407 12.9415C12.7656 12.6885 13.0139 11.9518 12.7921 11.404C12.5379 10.776 10.9367 9.96761 10.9367 9.96761C10.9367 9.96761 10.3481 11.6626 10.6022 12.2909C10.824 12.8384 11.5139 13.1953 12.1407 12.9415H12.1407Z" fill="white"/>
                                            <path d="M18.2747 12.6813C18.0205 12.0533 16.4193 11.2449 16.4193 11.2449C16.4193 11.2449 15.8307 12.9399 16.0849 13.5681C16.3067 14.1158 16.9967 14.4727 17.6233 14.219C18.2483 13.9658 18.4968 13.229 18.2747 12.6812L18.2747 12.6813Z" fill="white"/>
                                            <path d="M17.0525 6.63637C16.641 5.62011 13.877 4.18762 13.877 4.18762C13.877 4.18762 12.885 7.14074 13.2964 8.15687C13.7096 9.17741 14.8861 9.61013 15.9054 9.1975C16.9215 8.78635 17.4655 7.65705 17.0525 6.63627V6.63637Z" fill="white"/>
                                            <path d="M19.8018 18.7413C19.5476 18.1133 17.9464 17.3049 17.9464 17.3049C17.9464 17.3049 17.3578 18.9999 17.612 19.6282C17.8338 20.1758 18.5236 20.5327 19.1504 20.2788C19.7752 20.0258 20.0236 19.2891 19.8018 18.7413H19.8018Z" fill="white"/>
                                            </svg>
                                        </span>
                                            <span className="stat">Humidity: {weatherData.main.humidity}%</span>
                                    </div>
                                    <div className="stats__block">
                                        <span className="icon__stats">
                                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M3.93281 10.3757H11.6101C12.5389 10.3824 13.4375 10.0458 14.1334 9.43059C14.8293 8.81533 15.2736 7.96474 15.3808 7.04211C15.4842 6.00589 15.1408 4.97465 14.4366 4.20737C13.7375 3.43982 12.7479 3.00161 11.7097 2.99986H9.63812C9.3049 2.99986 8.99701 3.17772 8.83038 3.46622C8.66377 3.75483 8.66377 4.11041 8.83038 4.39903C8.99699 4.68751 9.3049 4.86538 9.63812 4.86538H11.7097C12.2347 4.86605 12.734 5.09306 13.08 5.48801C13.4258 5.88298 13.5849 6.40782 13.5163 6.92842C13.4476 7.37506 13.2191 7.78155 12.8732 8.07229C12.5274 8.36318 12.0877 8.51842 11.6359 8.50943H3.93264C3.59942 8.50943 3.29153 8.68716 3.1249 8.97579C2.95827 9.26442 2.95829 9.61984 3.1249 9.90846C3.29151 10.1971 3.59942 10.3748 3.93264 10.3748L3.93281 10.3757Z" fill="white"/>
                                            <path d="M20.9834 16.5293C20.8762 15.6067 20.4321 14.7562 19.7363 14.1411C19.0404 13.5258 18.142 13.1891 17.2132 13.1957H10.8001C10.4668 13.1957 10.159 13.3734 9.99233 13.6621C9.82572 13.9507 9.82572 14.3063 9.99233 14.5947C10.1589 14.8834 10.4668 15.0611 10.8001 15.0611H17.2386C17.6903 15.0521 18.13 15.2075 18.4758 15.4982C18.8218 15.7891 19.0502 16.1956 19.1189 16.6421C19.1875 17.1627 19.0285 17.6875 18.6826 18.0825C18.3366 18.4776 17.8374 18.7045 17.3124 18.7053H15.24C14.9067 18.7053 14.5989 18.883 14.4322 19.1716C14.2656 19.4601 14.2656 19.8157 14.4322 20.1043C14.5988 20.3929 14.9067 20.5707 15.24 20.5707H17.3114C18.3501 20.5697 19.3405 20.1318 20.04 19.3641C20.7439 18.5967 21.087 17.5655 20.9832 16.5294L20.9834 16.5293Z" fill="white"/>
                                            <path d="M8.74482 14.1293C8.74469 13.8818 8.64638 13.6446 8.4716 13.4696C8.29669 13.2945 8.05949 13.196 7.81215 13.1957H3.93272C3.59951 13.1957 3.29162 13.3734 3.12499 13.662C2.95838 13.9507 2.95838 14.3062 3.12499 14.5947C3.29159 14.8833 3.5995 15.0611 3.93272 15.0611H7.81215C8.05925 15.0608 8.29616 14.9625 8.47095 14.7879C8.64574 14.6132 8.7443 14.3764 8.74484 14.1293L8.74482 14.1293Z" fill="white"/>
                                            <path d="M15.7052 10.9781C15.7847 10.9781 15.8611 10.9465 15.9173 10.8903L16.5495 10.2581H16.5493C17.4181 10.4303 18.3143 10.1413 18.9188 9.49404C19.5233 8.84676 19.7505 7.93311 19.5193 7.07809C19.4917 6.97417 19.4106 6.893 19.3067 6.86541C18.4516 6.63439 17.538 6.86153 16.8907 7.46596C16.2434 8.07053 15.9544 8.96665 16.1267 9.83542L15.4931 10.4657C15.4073 10.5515 15.3816 10.6805 15.4281 10.7926C15.4746 10.9047 15.5839 10.9777 15.7052 10.9778L15.7052 10.9781Z" fill="white"/>
                                            <path d="M9.23133 16.3243L8.59917 15.6921C8.48145 15.5784 8.29435 15.5801 8.17862 15.6959C8.06289 15.8116 8.06129 15.9987 8.175 16.1164L8.80676 16.7486V16.7484C8.64403 17.5851 8.90573 18.4479 9.50574 19.0531C10.1297 19.6705 11.5245 20.1949 12.1997 19.5031H12.1999C12.4306 18.6484 12.2036 17.7351 11.5996 17.088C10.9954 16.4407 10.0998 16.1516 9.23132 16.3231L9.23133 16.3243Z" fill="white"/>
                                            </svg>
                                        </span>
                                        <span className="stat">Wind: {weatherData.wind.speed} km/h</span>
                                    </div>
                                    </React.Fragment>
                                ) : (
                                    <div className="block__info__stats">
                                        <span className="loading-text stat">Loading weather data...</span>
                                        <span className="loading-text stat">Loading weather data...</span>
                                        <span className="loading-text stat">Loading weather data...</span>
                                    </div>)
                            }
                        </div>
                    </main>
                    <footer className="footer">
                        {!search &&
                        <div className="home">
                            <img src={home} alt="home" />
                        </div>}
                        <div className="search">
                            {!search && <div className="icon__search"><img onClick={toggleMenu} src={searchIcon} alt="search" /></div>}
                            {search && (
                                <div className="search__block">
                                    <span className="search__title">Please enter the city name</span>
                                    <form onSubmit={handleSearchSubmit} className="form__search">
                                        <input
                                            type="text"
                                            value={searchQuery}
                                            onChange={(e) => setSearchQuery(e.target.value)}
                                            placeholder="Search for a city..."
                                            className="search-input"
                                        />
                                        <button type="submit" className="search-button">Search</button>
                                    </form>
                                </div>
                            )}
                        </div>
                    </footer>
                </div>
            </div>
        </div>
    )
}

export default Main;